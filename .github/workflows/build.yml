name: Build

on: [ push, pull_request ]

jobs:
  build-all:
    strategy:
      matrix:
        distro: [ 'ubuntu-18.04', 'ubuntu-20.04' ]
        cc: [ 'gcc', 'clang' ]
    name: Build
    runs-on: ${{ matrix.distro }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update repositories
        run: sudo apt-get -y update

      - name: Create python virtualenv
        run: python3 -m venv env

      - name: Install meson (via pip)
        run: |
          source env/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install meson==0.50
        if: matrix.distro == 'ubuntu-18.04'

      - name: Install meson (from distro repos)
        run: sudo apt-get -y install meson
        if: matrix.distro != 'ubuntu-18.04'

      - name: Install ninja
        run: sudo apt-get -y install ninja-build

      - name: Install vala
        run: sudo apt-get -y install valac

      - name: Install gcc
        run: sudo apt-get -y install gcc

      - name: Install clang
        run: sudo apt-get -y install clang

      - name: Install dependencies
        run: sudo apt-get -y install gtk+3.0 libgtk-3-dev

      - name: Prepare compilation with Meson (debug build)
        run: |
          source env/bin/activate
          meson setup build-debug
          meson configure -Dbuildtype=debug build-debug
          meson configure build-debug
        env:
          CC: ${{ matrix.cc }}

      - name: Compile with Ninja (debug build)
        run: ninja -C build-debug
        env:
          CC: ${{ matrix.cc }}

      - name: Prepare compilation with Meson (release build)
        run: |
          source env/bin/activate
          meson setup build-release
          meson configure -Dbuildtype=release build-release
          meson configure build-release
        env:
          CC: ${{ matrix.cc }}

      - name: Compile with Ninja (release build)
        run: ninja -C build-release
        env:
          CC: ${{ matrix.cc }}
