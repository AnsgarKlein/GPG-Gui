name: CI

on:
  push:
    branches:
      - '*'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
  workflow_dispatch:

jobs:

  compile:
    name: Compile
    runs-on: 'ubuntu-20.04'
    env:
      CC: 'gcc'
    steps:
      - name: Update repositories
        run: sudo apt-get -yq update

      - name: Install build tools
        run: |
          sudo apt-get -yq --no-install-recommends install \
           ninja-build \
           gcc \
           clang \
           valac
          sudo apt-get -yq --no-install-recommends install \
           python3 python3-pip python3-wheel python3-setuptools
          sudo python3 -m pip install --no-input --no-cache-dir --upgrade pip
          sudo python3 -m pip install --no-input --no-cache-dir meson==0.50

      - name: Install dependencies
        run: sudo apt-get -yq --no-install-recommends install libgtk-3-dev

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test compilation of release build
        run: |
          meson setup \
           -Dbuildtype=release \
           -Doptimization=3 \
           -DGPG_GUI_CSD=true \
           -DGPG_GUI_RDNS_NAMING=false \
           "build-release"
          ninja -C 'build-release'

      - name: Test compilation without client-side decorations
        run: |
          meson setup -DGPG_GUI_CSD=false 'build-nocsd'
          ninja -C 'build-nocsd'

      - name: Test compilation with reverse-DNS naming
        run: |
          meson setup -DGPG_GUI_RDNS_NAMING=true 'build-rdns'
          ninja -C 'build-rdns'

      - name: Test compilation with clang
        env: { 'CC': 'clang' }
        run: |
          meson setup 'build-clang'
          ninja -C 'build-clang'

  build-package:
    name: Build package
    needs: 'compile'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    runs-on: 'ubuntu-20.04'
    strategy:
      matrix:
        docker_image:
          - 'debian10'
          - 'fedora33'
          - 'ubuntu18.04'
          - 'ubuntu20.04'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Load Docker image cache
        id: cache
        uses: actions/cache@v2
        with:
          path: "~/gpg-gui-builder-${{ matrix.docker_image }}.tar"
          key: docker-cache-${{ matrix.docker_image }}-${{ github.run_id }}
          restore-keys: docker-cache-${{ matrix.docker_image }}-

      - name: Import cached Docker image
        run: |
          if [[ -f ~/gpg-gui-builder-${{ matrix.docker_image }}.tar ]]; then
          docker load --input ~/gpg-gui-builder-${{ matrix.docker_image }}.tar
          fi

      - name: Refresh Docker image
        run: |
          docker build -t 'gpg-gui-builder-${{ matrix.docker_image }}' \
          --cache-from 'gpg-gui-builder-${{ matrix.docker_image }}' \
          - < 'packages/${{ matrix.docker_image }}/Dockerfile'

      - name: Export Docker image
        run: |
          docker image save 'gpg-gui-builder-${{ matrix.docker_image }}' \
          > ~/"gpg-gui-builder-${{ matrix.docker_image }}.tar"

      - name: Build package in container
        run: packages/create-package.sh ${{ matrix.docker_image }}

      - name: Check file name of package
        id: package-name
        run: echo "::set-output name=package-name::$(packages/${{ matrix.docker_image }}/package-name.sh)"

      - name: Upload generated package
        uses: actions/upload-artifact@v2
        with:
          name: gpg-gui-packages
          path: "packages/build/${{ steps.package-name.outputs.package-name }}"
          if-no-files-found: error
          retention-days: 1
